import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import asyncio

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TOKEN = "8120422656:AAHB8qhwcAZt00xTDDApN1RoIqMnrCWvnSA"
PHOTO_PATH = "/data/data/com.termux/files/home/storage/downloads/egor.jpg"
TEXT = "–ë–µ—Ä—É –≤ —Ä–æ—Ç 1000‚ÇΩ –≤ —á–∞—Å, –∑–≤–æ–Ω–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É: +79189376318, —Ä—è–¥–æ–º —Å–ª–µ–≤–∞ –æ—Ç –º–µ–Ω—è –º–æ–π –¥—Ä—É–≥ —Ç–∞–∫–æ–π –∂–µ —Å–æ—Å—É–Ω–æ–∫"
USERS_FILE = "users.txt"

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
active_users = set()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ ---
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r") as f:
            for line in f:
                user_id = line.strip()
                if user_id:
                    active_users.add(int(user_id))

def save_user(user_id: int):
    if user_id not in active_users:
        with open(USERS_FILE, "a") as f:
            f.write(f"{user_id}\n")
        active_users.add(user_id)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    save_user(user_id)

    buttons = [
        [KeyboardButton("üìû –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä")],
        [KeyboardButton("üñºÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ")],
        [KeyboardButton("üö™ –í—ã—Ö–æ–¥")]
    ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {message_text}")

    if user_id not in active_users:
        return

    if message_text == "üìû –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä":
        await update.message.reply_text(TEXT)
    elif message_text == "üñºÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ":
        try:
            with open(PHOTO_PATH, "rb") as photo:
                await update.message.reply_photo(photo)
        except Exception as e:
            await update.message.reply_text("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
    elif message_text == "üö™ –í—ã—Ö–æ–¥":
        if user_id in active_users:
            active_users.remove(user_id)
            await update.message.reply_text("–í—ã –≤—ã—à–ª–∏. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start")
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")

async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if active_users:
        users_list = "\n".join(str(uid) for uid in active_users)
        await update.message.reply_text(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_list}")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    load_users()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("users", show_users))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

# --- –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –∑–∞—â–∏—Ç–æ–π ---
if __name__ == "__main__":
    while True:
        try:
            main()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
            asyncio.sleep(3)
